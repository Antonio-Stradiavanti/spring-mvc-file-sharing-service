<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>

	<parent>
		<groupId>org.springframework.boot</groupId>
		<artifactId>spring-boot-starter-parent</artifactId>
<!--	Позволяет всем библиотекам spring-boot использовать одну версию без явного указания	-->
		<version>3.3.1</version>
		<relativePath/> <!-- lookup parent from repository -->
	</parent>

	<groupId>ru.manannikov.filesharingservice</groupId>
	<artifactId>securityservice</artifactId>
	<version>0.0.1-SNAPSHOT</version>

	<name>Security Service</name>
	<description>Сервис аутентификации пользователей filesharingservice</description>

	<url/>
	<licenses>
		<license/>
	</licenses>
	<developers>
		<developer/>
	</developers>
	<scm>
		<connection/>
		<developerConnection/>
		<tag/>
		<url/>
	</scm>
<!-- Объявление переменных файла сборки -->
	<properties>
		<java.version>22</java.version>
		<lombok.version>1.18.34</lombok.version>
		<liquibase.version>4.29.0</liquibase.version>
		<postgres.version>42.7.3</postgres.version>
		<swagger.version>2.6.0</swagger.version>
		<spring-cloud.version>2023.0.3</spring-cloud.version>

		<jjwt.version>0.12.6</jjwt.version>

		<dockerfile-maven.version>1.4.13</dockerfile-maven.version>
		<docker.image.prefix>filesharingservice</docker.image.prefix>
	</properties>

	<dependencies>
<!--	База данных	-->
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-data-jpa</artifactId>
		</dependency>
		<dependency>
			<groupId>org.liquibase</groupId>
			<artifactId>liquibase-core</artifactId>
			<version>${liquibase.version}</version>
		</dependency>
		<dependency>
			<groupId>org.postgresql</groupId>
			<artifactId>postgresql</artifactId>
			<version>${postgres.version}</version>
			<scope>runtime</scope>
		</dependency>
<!--	Включает Jakarta Validation API	-->
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-validation</artifactId>
		</dependency>
		<!--	Безопасность	-->
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-security</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework.security</groupId>
			<artifactId>spring-security-test</artifactId>
			<scope>test</scope>
		</dependency>
<!--	Jwt token	-->
<!--		<dependency>-->
<!--			<groupId>org.springframework.boot</groupId>-->
<!--			<artifactId>spring-boot-starter-oauth2-resource-server</artifactId>-->
<!--		</dependency>-->
		<dependency>
			<groupId>io.jsonwebtoken</groupId>
			<artifactId>jjwt-api</artifactId>
			<version>${jjwt.version}</version>
		</dependency>

		<dependency>
			<groupId>io.jsonwebtoken</groupId>
			<artifactId>jjwt-impl</artifactId>
			<version>${jjwt.version}</version>
			<scope>runtime</scope>
		</dependency>

		<dependency>
			<groupId>io.jsonwebtoken</groupId>
			<artifactId>jjwt-jackson</artifactId>
			<version>${jjwt.version}</version>
			<scope>runtime</scope>
		</dependency>
<!--	Swagger	-->
		<dependency>
			<groupId>org.springdoc</groupId>
			<artifactId>springdoc-openapi-starter-webmvc-ui</artifactId>
			<version>${swagger.version}</version>
		</dependency>
<!--	Spring	-->
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-configuration-processor</artifactId>
			<optional>true</optional>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-test</artifactId>
			<scope>test</scope>
		</dependency>
<!--	Препроцессор аннотаций   -->
		<dependency>
			<groupId>org.projectlombok</groupId>
			<artifactId>lombok</artifactId>
			<version>${lombok.version}</version>
			<optional>true</optional>
		</dependency>
<!--	Инструменты разработчика	-->
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-devtools</artifactId>
			<scope>runtime</scope>
			<optional>true</optional>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-actuator</artifactId>
		</dependency>
<!--    Spring Cloud-->
		<dependency>
			<groupId>org.springframework.cloud</groupId>
			<artifactId>spring-cloud-starter-config</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework.cloud</groupId>
			<artifactId>spring-cloud-starter-netflix-eureka-client</artifactId>
				<exclusions>
					<exclusion>
						<groupId>org.springframework.cloud</groupId>
						<artifactId>spring-cloud-starter-ribbon</artifactId>
					</exclusion>
				</exclusions>
		</dependency>

	</dependencies>

	<dependencyManagement>
		<dependencies>
			<dependency>
				<groupId>org.springframework.cloud</groupId>
				<artifactId>spring-cloud-dependencies</artifactId>
				<version>${spring-cloud.version}</version>
				<type>pom</type>
				<scope>import</scope>
			</dependency>
		</dependencies>
	</dependencyManagement>
<!-- Список плагинов, которые будут запущены при сборке  -->
	<build>
		<plugins>
<!--		Позволяет использовать для сборки приложения команду spring-boot:run	-->
			<plugin>
				<groupId>org.springframework.boot</groupId>
				<artifactId>spring-boot-maven-plugin</artifactId>
				<configuration>
					<excludes>
						<exclude>
							<groupId>org.projectlombok</groupId>
							<artifactId>lombok</artifactId>
						</exclude>
					</excludes>
					<layers>
						<enabled>
							true
						</enabled>
					</layers>
				</configuration>
			</plugin>
<!--		docker плагин, используется для автоматической генерации образа при сборке приложения 	-->
			<plugin>
				<groupId>com.spotify</groupId>
				<artifactId>dockerfile-maven-plugin</artifactId>
				<version>${dockerfile-maven.version}</version>
				<executions>
					<execution>
						<id>default</id>
						<goals>
							<goal>build</goal>
							<!--							<goal>push</goal>-->
						</goals>
					</execution>
				</executions>
				<configuration>

					<repository>${docker.image.prefix}/${project.artifactId}</repository>
					<!--				Указываем версию проекта -->
					<tag>${project.version}</tag>

					<buildArgs>
						<!--					артифакт-версия, JAR_FILE -> переменная, которую плагин передаст команде docker build -build-arg name=value в виде пары ключ-значение	-->
						<JAR_FILE>
							target/${project.build.finalName}.jar
						</JAR_FILE>
					</buildArgs>
				</configuration>
			</plugin>
		</plugins>
	</build>

</project>
